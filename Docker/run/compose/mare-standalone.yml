services:
  postgres:
    image: postgres:latest
    command: ["postgres", "-c", "log_statement=all"]
    restart: always
    ports:
      - 5432:5432/tcp
    env_file:
      - .env.local
    environment:
      POSTGRES_DB: "${MARE_POSTGRES_DB}"
      POSTGRES_USER: "${MARE_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${MARE_POSTGRES_PASSWORD}"
    volumes:
      - ../data/postgresql/:/var/lib/postgresql/data
      - postgres_socket:/var/run/postgresql:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mare"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    command: [sh, -c, "rm -f /data/dump.rdb && redis-server --save \"\" --appendonly no --requirepass secretredispassword"]
    volumes:
      - cache:/data

  mare-server:
    image: darkarchon/mare-synchronos-server:latest
    restart: on-failure
    ports:
      - 6000:6000/tcp
      - 6050:6050/tcp
    env_file:
      - .env.local
    environment:
      MareSynchronos__CdnFullUrl: "${MARE_CDNURL}"
      MareSynchronos__XIVAPIKey: "${MARE_XIVAPIKEY}"
      DOTNET_USE_POLLING_FILE_WATCHER: 1
    volumes:
      - ../config/standalone/server-standalone.json:/opt/MareSynchronosServer/appsettings.json
      - ../log/server-standalone/:/opt/MareSynchronosServer/logs/:rw
      - postgres_socket:/var/run/postgresql/:rw
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:6000/health || exit 1"]
      retries: 60
      start_period: 10s
      timeout: 1s
  # mare-auth:
  #   image: darkarchon/mare-synchronos-authservice:latest
  #   restart: on-failure
  #   environment:
  #     DOTNET_USE_POLLING_FILE_WATCHER: 1
  #   ports:
  #     - 6500:6500/tcp
  #   volumes:
  #     - ../config/standalone/authservice-standalone.json:/opt/MareSynchronosAuthService/appsettings.json
  #     - ../log/authservice-standalone/:/opt/MareSynchronosAuthService/logs/:rw
  #     - postgres_socket:/var/run/postgresql/:rw
  #   depends_on:
  #     mare-server:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy
  mare-services:
    image: darkarchon/mare-synchronos-services:latest
    restart: on-failure
    env_file:
      - .env.local
    environment:
      MareSynchronos__DiscordBotToken: "${MARE_DISCORD_TOKEN}"
      MareSynchronos__DiscordChannelForMessages: "${MARE_DISCORD_CHANNEL_MAIN}"
      MareSynchronos__DiscordChannelForCommands: "${MARE_DISCORD_CHANNEL_COMMANDS}"
      MareSynchronos__DiscordChannelForReports: "${MARE_DISCORD_CHANNEL_REPORTS}"
      MareSynchronos__DiscordOAuthClientSecret: "${MARE_DISCORD_OAUTH_CLIENT_SECRET}"
      MareSynchronos__DiscordOAuthClientId: "${MARE_DISCORD_OAUTH_CLIENT_ID}"
      MareSynchronos__DiscordRoleRegistered: "${MARE_DISCORD_ROLE_REGISTERED}"
      MareSynchronos__PublicOAuthBaseUri: "${MARE_PUBLIC_OAUTH_BASE_URI}"
      DOTNET_USE_POLLING_FILE_WATCHER: 1
    volumes:
      - ../config/standalone/services-standalone.json:/opt/MareSynchronosServices/appsettings.json
      - ../log/services-standalone/:/opt/MareSynchronosServices/logs/:rw
      - postgres_socket:/var/run/postgresql/:rw
    depends_on:
      mare-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
  mare-files:
    image: darkarchon/mare-synchronos-staticfilesserver:latest
    ports:
      - 6200:6200/tcp
    restart: on-failure
    env_file:
      - .env.local
    environment:
      MareSynchronos__CdnFullUrl: "${MARE_CDNURL}"
      DOTNET_USE_POLLING_FILE_WATCHER: 1
    volumes:
      - ../config/standalone/files-standalone.json:/opt/MareSynchronosStaticFilesServer/appsettings.json
      - ../log/files-standalone/:/opt/MareSynchronosStaticFilesServer/logs/:rw
      - postgres_socket:/var/run/postgresql/:rw
      - ../data/files-standalone/:/marecache/:rw
    depends_on:
      postgres:
        condition: service_healthy
      mare-server:
        condition: service_healthy
  # traefik:
  #   image: traefik:v2.11
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ../config/standalone/traefik.yml:/etc/traefik/traefik.yml:ro
  #     - ../config/standalone/dynamic.yml:/etc/traefik/dynamic.yml:ro

volumes:
  postgres_socket:
  cache:
    driver: local